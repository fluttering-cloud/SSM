 Java Massage Service :
     - java 标准的异步消息处理方案

     - 异步消息处理方案解决的问题 :
           功能解耦、流量削峰、消息通讯

     -JMS 获取消息的两种模式：
           1.拉取模式 : 在程序运行的过程中一直向队列发送请求，直到获取到消息为止
           2.推送模式 : 当队列有消息时，会自动推送到相关的目的地去执行，在此之前，接收者处于堵塞状态

     -在 springboot 中使用消息 JMS
           1.导入依赖：ActiveMQ 或 Artemis,Artemis 是 ActiveMQ 的升级版
           2.若是进行分布式开发，还需要对异步消息在配置文件内进行如下配置
              2.1 : 代理主机
              2.2 : 代理端口 : 若在本地运行，则异步消息的组件端口默认为61616
              2.3 : 访问用户（可选）
              2.4 : 访问密码 （可选）
              2.5 : 若是在本地开发，则不需要进行这些配置

          3.获取 JMS 的核心类 JmsTemplate,并使用其方法进行消息发送和接收

          4.发送消息
              4.1 : 在异步消息处理方案内的消息不是我们通常所说的消息，在这里只要是在发送段和接收端之间流动的数据都是消息，
                     如一个类、一组参数等等。
              4.2 :  JmsTemplate 内发送消息主要有两个方法 : send 和 convertAndSend,但这两个方法有几种不同的重载形式
              4.3 :  send方法 需要通过 MassageCreator 对象将消息进行封装再传递
              4.4 :  convertAndSend方法 可以直接传递任意对象，也可以用 MassagePostProcessor 在发送消息之前对消息进行处理
              4.5 :  这两个方法都可以不设置发送的目的地，若不设置，这发送目的地为默认的目的地。消息发送的目的地在方法参数中通过Destination
                     对象设置

          5.配置 Destination 对象，这个是可选的。也可以在配置文件里设置，若不配置这个类，则发送消息时使用配置文件内配置的目的地。

          6.配置消息转换器 : MessageConverter的作用主要有两方面，一方面它可以把我们的非标准化Message对象转换成我们的目标Message对象，
                          这主要是用在发送消息的时候；另一方面它又可以把我们的Message对象转换成对应的目标对象，这主要是用在接收消息的时候。

                          在我们使用 JMS 发送数据时，会将数据封装成 Massage 对象，接收端收到的也是这个对象，在接收端收到Massage对象后，
                          我们需要将其还原成原来的类型，这时候就需要使用消息转换器了。

          7.接收消息,接收消息也是使用 JmsTemplate 对象，此对象提供了两个接收消息的方法：receiver 和 receiverAndConvert。
               7.1 : receiver方法 接收的是原始的 Message 对象，在收到消息后还需要使用消息转换器将其转换为目标类型
               7.2 : receiverAndConvert 方法在接收到消息的同时会将其转换为目标类型，我们只需要在方法前面加上强制类型转换即可
               7.3 : 设置消息监听器接收消息
               7.4 : 注意：receiver 和 receiverAndConvert都是采用拉取模式的；而消息监听器需要自己创建，多采用拉取模式。

